<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RawHTTP</title>
    <link>https://renatoathaydes.github.io/rawhttp/docs/</link>
    <description>Recent content on RawHTTP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 May 2018 19:02:44 +0200</lastBuildDate>
    
	<atom:link href="https://renatoathaydes.github.io/rawhttp/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Get Started</title>
      <link>https://renatoathaydes.github.io/rawhttp/docs/get-started/</link>
      <pubDate>Thu, 10 May 2018 19:02:44 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/docs/get-started/</guid>
      <description>Add a dependency on RawHTTP Maven &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.athaydes.rawhttp&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;rawhttp-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Gradle dependency &amp;#39;com.athaydes.rawhttp:rawhttp-core:2.0&amp;#39; Download the jar with curl curl https://jcenter.bintray.com/com/athaydes/rawhttp/rawhttp-core/2.0/rawhttp-core-2.0.jar -o rawhttp.jar   Index Next: Low Level API</description>
    </item>
    
    <item>
      <title>Low level API</title>
      <link>https://renatoathaydes.github.io/rawhttp/docs/low-level-api/</link>
      <pubDate>Thu, 10 May 2018 14:25:00 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/docs/low-level-api/</guid>
      <description>Send a GET request import rawhttp.core.*; import java.net.Socket; RawHttp http = new RawHttp(); RawHttpRequest request = http.parseRequest( &amp;#34;GET / HTTP/1.1\r\n&amp;#34; + &amp;#34;Host: headers.jsontest.com\r\n&amp;#34; + &amp;#34;User-Agent: RawHTTP\r\n&amp;#34; + &amp;#34;Accept: application/json&amp;#34;); Socket socket = new Socket(&amp;#34;headers.jsontest.com&amp;#34;, 80); request.writeTo(socket.getOutputStream()); Send a POST request with a body import rawhttp.core.*; import java.net.Socket; String jsonBody = &amp;#34;{ \&amp;#34;hello\&amp;#34;: true, \&amp;#34;raw_http\&amp;#34;: \&amp;#34;2.0\&amp;#34; }&amp;#34;; RawHttp http = new RawHttp(); RawHttpRequest request = http.parseRequest( &amp;#34;POST /post HTTP/1.1\r\n&amp;#34; + &amp;#34;Host: httpbin.</description>
    </item>
    
    <item>
      <title>Mistakes RawHttp fixes up</title>
      <link>https://renatoathaydes.github.io/rawhttp/docs/mistakes-rawhttp-fixes-up/</link>
      <pubDate>Thu, 10 May 2018 14:24:00 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/docs/mistakes-rawhttp-fixes-up/</guid>
      <description>By default, RawHttp will fix the following common mistakes when parsing a HTTP message:
Line separators According to RFC-7230, which defines the HTTP/1.1 message format, line separators must be CRLF, or \r\n.
However, by default, RawHttp allows a simple \n to be used:
import rawhttp.core.*; RawHttp http = new RawHttp(); RawHttpRequest request = http.parseRequest( &amp;#34;GET /hello HTTP/1.1\n&amp;#34; + &amp;#34;Host: example.com&amp;#34;); HTTP version For simplicity, the HTTP version can be omitted from HTTP messages, in which case HTTP/1.</description>
    </item>
    
    <item>
      <title>Working with message body</title>
      <link>https://renatoathaydes.github.io/rawhttp/docs/working-with-http-body/</link>
      <pubDate>Thu, 10 May 2018 14:02:50 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/docs/working-with-http-body/</guid>
      <description>RawHTTP makes it easy to replace the body of a HTTP message, changing the relevant headers as appropriate.
Set body from String import rawhttp.core.*; import rawhttp.core.body.*; RawHttp http = new RawHttp(); RawHttpRequest request = http.parseRequest( &amp;#34;POST http://example.com/hello&amp;#34;); RawHttpRequest requestWithBody = request.withBody( new StringBody(&amp;#34;Hello RawHTTP&amp;#34;, &amp;#34;text/plain&amp;#34;)); System.out.println(requestWithBody.eagerly()); Prints:
POST /hello HTTP/1.1 Host: example.com Content-Type: text/plain Content-Length: 13 Hello RawHTTP  Set body from File import rawhttp.core.*; import rawhttp.core.body.*; RawHttp http = new RawHttp(); RawHttpRequest request = http.</description>
    </item>
    
    <item>
      <title>HTTP Client</title>
      <link>https://renatoathaydes.github.io/rawhttp/docs/http-client/</link>
      <pubDate>Thu, 10 May 2018 14:02:44 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/docs/http-client/</guid>
      <description>Using a HTTP client To make it easier to send HTTP requests, you can use a TcpRawHttpClient:
import rawhttp.core.*; import rawhttp.core.client.*; TcpRawHttpClient client = new TcpRawHttpClient(); RawHttp http = new RawHttp(); RawHttpRequest request = http.parseRequest(&amp;#34;...&amp;#34;); RawHttpResponse&amp;lt;?&amp;gt; response = client.send(request); The client keeps connections alive if possible, so after you&amp;rsquo;re done with it, close it:
client.close(); Configuring a HTTP client To configure a HTTP client, use the constructor that takes an instance of TcpRawHttpClient.</description>
    </item>
    
    <item>
      <title>HTTP Server</title>
      <link>https://renatoathaydes.github.io/rawhttp/docs/http-server/</link>
      <pubDate>Thu, 10 May 2018 14:02:44 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/docs/http-server/</guid>
      <description>Using a HTTP server Even though you can write a simple HTTP server using only a ServerSocket and RawHttp to parse requests and responses, RawHTTP also offers a simple server implementation that makes things easier:
import rawhttp.core.*; import rawhttp.core.server.*; RawHttpServer server = new TcpRawHttpServer(8086); RawHttp http = new RawHttp(); server.start(request -&amp;gt; { RawHttpResponse&amp;lt;?&amp;gt; response = http.parseResponse(...); return Optional.of(response); }); Stop the server once you don&amp;rsquo;t need it anymore:
server.stop(); Configuring a HTTP server As with the HTTP client, to configure a HTTP server, pass the options into the constructor.</description>
    </item>
    
  </channel>
</rss>