<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RawHTTP</title>
    <link>https://renatoathaydes.github.io/rawhttp/</link>
    <description>Recent content on RawHTTP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Jun 2018 12:40:11 +0200</lastBuildDate>
    
	<atom:link href="https://renatoathaydes.github.io/rawhttp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RawHTTP Duplex</title>
      <link>https://renatoathaydes.github.io/rawhttp/rawhttp-modules/duplex/</link>
      <pubDate>Sun, 03 Jun 2018 12:40:11 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/rawhttp-modules/duplex/</guid>
      <description>The rawhttp-duplex module can be used to create a duplex communication channel as either a client or a server.
The entry point of the library is the com.athaydes.rawhttp.duplex.RawHttpDuplex class.
Its connect methods are used from a client to connect to a server, while the accept methods should be used within a HTTP server to handle requests from a client.
Example Kotlin code on the server:
import rawhttp.core.* import com.athaydes.rawhttp.duplex.* import rawhttp.</description>
    </item>
    
    <item>
      <title>Get Started</title>
      <link>https://renatoathaydes.github.io/rawhttp/docs/get-started/</link>
      <pubDate>Thu, 10 May 2018 19:02:44 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/docs/get-started/</guid>
      <description>Add a dependency on RawHTTP Maven &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.athaydes.rawhttp&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;rawhttp-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Gradle dependency &amp;#39;com.athaydes.rawhttp:rawhttp-core:2.1&amp;#39; Download the jar with curl curl https://jcenter.bintray.com/com/athaydes/rawhttp/rawhttp-core/2.1/rawhttp-core-2.1.jar -o rawhttp.jar   Index Next: Low Level API</description>
    </item>
    
    <item>
      <title>Low level API</title>
      <link>https://renatoathaydes.github.io/rawhttp/docs/low-level-api/</link>
      <pubDate>Thu, 10 May 2018 14:25:00 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/docs/low-level-api/</guid>
      <description>Send a GET request import rawhttp.core.*; import java.net.Socket; RawHttp http = new RawHttp(); RawHttpRequest request = http.parseRequest( &amp;#34;GET / HTTP/1.1\r\n&amp;#34; + &amp;#34;Host: headers.jsontest.com\r\n&amp;#34; + &amp;#34;User-Agent: RawHTTP\r\n&amp;#34; + &amp;#34;Accept: application/json&amp;#34;); Socket socket = new Socket(&amp;#34;headers.jsontest.com&amp;#34;, 80); request.writeTo(socket.getOutputStream()); Send a POST request with a body import rawhttp.core.*; import java.net.Socket; String jsonBody = &amp;#34;{ \&amp;#34;hello\&amp;#34;: true, \&amp;#34;raw_http\&amp;#34;: \&amp;#34;2.0\&amp;#34; }&amp;#34;; RawHttp http = new RawHttp(); RawHttpRequest request = http.parseRequest( &amp;#34;POST /post HTTP/1.1\r\n&amp;#34; + &amp;#34;Host: httpbin.</description>
    </item>
    
    <item>
      <title>Mistakes RawHttp fixes up</title>
      <link>https://renatoathaydes.github.io/rawhttp/docs/mistakes-rawhttp-fixes-up/</link>
      <pubDate>Thu, 10 May 2018 14:24:00 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/docs/mistakes-rawhttp-fixes-up/</guid>
      <description>By default, RawHttp will fix the following common mistakes when parsing a HTTP message:
Line separators According to RFC-7230, which defines the HTTP/1.1 message format, line separators must be CRLF, or \r\n.
However, by default, RawHttp allows a simple \n to be used:
import rawhttp.core.*; RawHttp http = new RawHttp(); RawHttpRequest request = http.parseRequest( &amp;#34;GET /hello HTTP/1.1\n&amp;#34; + &amp;#34;Host: example.com&amp;#34;); HTTP version For simplicity, the HTTP version can be omitted from HTTP messages, in which case HTTP/1.</description>
    </item>
    
    <item>
      <title>Working with message body</title>
      <link>https://renatoathaydes.github.io/rawhttp/docs/working-with-http-body/</link>
      <pubDate>Thu, 10 May 2018 14:02:50 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/docs/working-with-http-body/</guid>
      <description>RawHTTP makes it easy to replace the body of a HTTP message, changing the relevant headers as appropriate.
Set body from String import rawhttp.core.*; import rawhttp.core.body.*; RawHttp http = new RawHttp(); RawHttpRequest request = http.parseRequest( &amp;#34;POST http://example.com/hello&amp;#34;); RawHttpRequest requestWithBody = request.withBody( new StringBody(&amp;#34;Hello RawHTTP&amp;#34;, &amp;#34;text/plain&amp;#34;)); System.out.println(requestWithBody.eagerly()); Prints:
POST /hello HTTP/1.1 Host: example.com Content-Type: text/plain Content-Length: 13 Hello RawHTTP  Set body from File import rawhttp.core.*; import rawhttp.core.body.*; RawHttp http = new RawHttp(); RawHttpRequest request = http.</description>
    </item>
    
    <item>
      <title>HTTP Client</title>
      <link>https://renatoathaydes.github.io/rawhttp/docs/http-client/</link>
      <pubDate>Thu, 10 May 2018 14:02:44 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/docs/http-client/</guid>
      <description>Using a HTTP client To make it easier to send HTTP requests, you can use a TcpRawHttpClient:
import rawhttp.core.*; import rawhttp.core.client.*; TcpRawHttpClient client = new TcpRawHttpClient(); RawHttp http = new RawHttp(); RawHttpRequest request = http.parseRequest(&amp;#34;...&amp;#34;); RawHttpResponse&amp;lt;?&amp;gt; response = client.send(request); The client keeps connections alive if possible, so after you&amp;rsquo;re done with it, close it:
client.close(); Configuring a HTTP client To configure a HTTP client, use the constructor that takes an instance of TcpRawHttpClient.</description>
    </item>
    
    <item>
      <title>HTTP Server</title>
      <link>https://renatoathaydes.github.io/rawhttp/docs/http-server/</link>
      <pubDate>Thu, 10 May 2018 14:02:44 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/docs/http-server/</guid>
      <description>Using a HTTP server Even though you can write a simple HTTP server using only a ServerSocket and RawHttp to parse requests and responses, RawHTTP also offers a simple server implementation that makes things easier:
import rawhttp.core.*; import rawhttp.core.server.*; RawHttpServer server = new TcpRawHttpServer(8086); RawHttp http = new RawHttp(); server.start(request -&amp;gt; { RawHttpResponse&amp;lt;?&amp;gt; response = http.parseResponse(...); return Optional.of(response); }); Stop the server once you don&amp;rsquo;t need it anymore:
server.stop(); Configuring a HTTP server As with the HTTP client, to configure a HTTP server, pass the options into the constructor.</description>
    </item>
    
    <item>
      <title>RawHTTP CLI</title>
      <link>https://renatoathaydes.github.io/rawhttp/rawhttp-modules/cli/</link>
      <pubDate>Thu, 11 May 2017 19:20:11 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/rawhttp-modules/cli/</guid>
      <description>The rawhttp-cli module is a CLI (command-line interface) that can send HTTP requests and serve local files via a RawHTTP server.
Download curl https://jcenter.bintray.com/com/athaydes/rawhttp/rawhttp-cli/1.1.1/rawhttp-cli-1.1.1-all.jar -o rawhttp.jar  Usage Use rawhttp send to send HTTP requests.
Use rawhttp serve to serve a local directory via HTTP.
To see the help screen, run rawhttp help.
 Using the send command The send command has the purpose of sending out HTTP requests. It prints the full HTTP response (including status line, headers, body) to stdout.</description>
    </item>
    
    <item>
      <title>RawHTTP HttpComponents</title>
      <link>https://renatoathaydes.github.io/rawhttp/rawhttp-modules/http-components/</link>
      <pubDate>Thu, 11 May 2017 19:20:11 +0200</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/rawhttp-modules/http-components/</guid>
      <description>RawHTTP can be integrated with the popular HttpComponents library&amp;rsquo;s HTTP client.
This can be useful if you need to use features from a more complete HTTP client, such as cookie administration and automatic redirects, but prefer to use the simpler API provided by RawHTTP.
Sending a HTTP Request  Modules</description>
    </item>
    
    <item>
      <title></title>
      <link>https://renatoathaydes.github.io/rawhttp/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/about/</guid>
      <description>About RawHTTP Motivation RawHTTP was created by Renato Athaydes after he realized just how complex Java HTTP clients and servers were, when in reality, HTTP itself is pretty simple.
Imagine that you just wanted to fire up a little microservice with a couple of REST endpoints.
One of the &amp;ldquo;simplest&amp;rdquo; Java server micro-frameworks around, SparkJava, lets you do that, but it takes all of these things with it:
\--- com.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://renatoathaydes.github.io/rawhttp/in-5-minutes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://renatoathaydes.github.io/rawhttp/in-5-minutes/</guid>
      <description>RawHTTP in 5 minutes RawHTTP is a Java library that makes it easy to work with HTTP 1.0 and 1.1.
It has ZERO dependencies.
You might want to use it if you need a stripped-down-to-basics HTTP client or server.
How does it work? RawHTTP allows you to write raw HTTP messages by hand, with just a little extra support to avoid mistakes.
The main class in the library is RawHttp.</description>
    </item>
    
  </channel>
</rss>